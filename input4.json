{
  "language": "Solidity",
  "sources": {
    "smart_contracts/folderTwo/second.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"smart_contracts/folderTwo/third.sol\";\r\n\r\ncontract Second is third{\r\n    function add(uint num1, uint num2) public pure returns(uint){\r\n        return num1 + num2;\r\n    }\r\n\r\n}"
    },
    "smart_contracts/folderTwo/third.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.19;\r\n\r\ncontract third {\r\n    function get() public pure returns (string memory) {\r\n        return \"third\";\r\n    }\r\n}\r\n"
    },
    "smart_contracts/smart.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.19;\nimport \"smart_contracts/folderTwo/second.sol\";\ncontract PublicStorageFuck is Second {\n    mapping(address => mapping(string => string)) public Storage;\n    uint cost = 12445677;\n    address payable owner = payable(0x204a167f93d8f02758448979E3EA1A8ca41b6c5E);\n//    constructor(uint _cost){\n//        owner = payable(msg.sender);\n//        cost = _cost + 111;\n//\n//    }\n\n    function saveData(string memory key, string memory value) public payable{\n        require(msg.value >= cost, \"not enough shit\");\n        Storage[msg.sender][key] = value;\n        owner.transfer(msg.value);\n\n    }\n\n}"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    }
  }
}